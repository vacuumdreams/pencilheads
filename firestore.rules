rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSpaceAdmin(spaceId) {
      return request.auth.uid in get(/databases/$(database)/documents/spaces/$(spaceId)).data.admins;
    }

    function isSpaceMember(spaceId) {
      return exists(/databases/$(database)/documents/spaces/$(spaceId)/members/$(request.auth.uid));
    }

    match /spaces {
      allow read: if request.auth != null;
      match /{spaceId} {
        allow create: if request.auth != null;
        allow read: if isSpaceMember(spaceId);
        allow update, delete: if isSpaceAdmin(spaceId);
        match /members/{memberId} {
       	allow create: if false;
       	allow read: if isSpaceMember(spaceId);
          allow update: if false;
          allow delete: if request.auth.uid == memberId;
        }
      }
    }

    match /invites/{inviteId} {
      allow create: if isSpaceAdmin(resource.data.spaceId);
      allow update: if request.auth.token.email == resource.data.email;
      allow read: if isSpaceMember(resource.data.spaceId);
    }

    match /events/{spaceId}/{eventId} {
    	allow create: if isSpaceMember(spaceId);
			allow read: if isSpaceMember(spaceId);
      allow update, delete: if isSpaceAdmin(spaceId) || request.auth.uid == resource.data.createdBy;
			match /subscriptions/{userId} {
      	allow create: if isSpaceMember(spaceId);
        allow read: if isSpaceMember(spaceId);
        allow update: if false;
        allow delete: if request.auth.uid == userId
      }
    }

    match /venues/{spaceId}/{id} {
      allow read, write: if isSpaceMember(spaceId);
    }
  }
}
